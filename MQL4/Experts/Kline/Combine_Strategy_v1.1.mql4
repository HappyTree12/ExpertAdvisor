//+------------------------------------------------------------------+
//|                      Merged EA: MACD_EMA + MA7                  |
//+------------------------------------------------------------------+
#property copyright "Kline"
#property link      "https://www.mql5.com"
#property version   "1.0"
#property strict

// Adjustable Parameters
extern double Lots = 0.05;           // Lot size for trading
extern double StopLoss1 = 5.0;        // Stop loss for Strategy 1
extern double takeProfit = 3.0;      // Take Profit
extern int CooldownDuration = 60;    // Cooldown period in seconds
extern int Choice = 0;

extern double StopLoss2 = 5.0;        // Stop Loss for Strategy 2
extern double TrailingStepUSD = 3.0; // Trailing step in USD (represent how many USD market up/down)
extern double MoveStopLoss = 3.0; // Allow user to move the stoploss

double LastBuyThreshold = 0.0;  // For Buy Orders
double LastSellThreshold = 0.0; // For Sell Orders

// Magic Number
int MACD_MagicNumber = 100;   // Magic number for MACD_EMA strategy
int MA7_MagicNumber = 200;    // Magic number for MA7 strategy

// Global Variables
datetime CooldownEndTime = 0;        // Cooldown end time (default is 0)
datetime LastCloseTime = 0;          // Tracks the last order close time
string StrategyName = "MACD_EMA_MA";

// Indicator Parameters
int FastEMA = 12;                    // Fast EMA for MACD
int SlowEMA = 26;                    // Slow EMA for MACD
int SignalSMA = 9;                   // Signal SMA for MACD
int EMA_Period = 52;                 // EMA52 for MACD_EMA
int MA_Period = 7;                   // EMA7 for MA7 strategy

//+------------------------------------------------------------------+
//| Initialization                                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   Print(StrategyName, "EA Initialized.");
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Deinitialization                                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   Print("EA Deinitialized. Reason: ", reason);
   ObjectsDeleteAll(0, "SL_");
  }

//+------------------------------------------------------------------+
//| Main OnTick Function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
// Monitor closed orders and update cooldown
   MonitorClosedOrders();

// Skip processing if cooldown is active
   if(CooldownEndTime > TimeCurrent())
     {
      Print("Cooldown active. No trades until ", TimeToString(CooldownEndTime, TIME_DATE | TIME_SECONDS));
      return;
     }

// Skip if there are open positions for either strategy
   if(HasOpenPositions(MACD_MagicNumber) || HasOpenPositions(MA7_MagicNumber))
     {
      Print("Position ongoing. Skipping new trades.");
      return;
     }

   if(Choice == 1)
     {
      ProcessMACD_EMA();
     }

   else
      if(Choice == 2)
        {
         ProcessMA7();

        }
      else

         if(Choice == 3)
           {
            ProcessMACD_EMA();
            ProcessMA7();

           }

  }

//+------------------------------------------------------------------+
//| MACD_EMA Strategy                                                |
//+------------------------------------------------------------------+
void ProcessMACD_EMA()
  {
   double EMA_Current = iMA(Symbol(), 0, EMA_Period, 0, MODE_EMA, PRICE_CLOSE, 1);   // Current EMA
   double Close_FirstCandle = iClose(Symbol(), 0, 1);                               // Previous candle close

   double MACD_Current = iMACD(NULL, 0, FastEMA, SlowEMA, SignalSMA, PRICE_CLOSE, MODE_MAIN, 0);  // Current MACD Line
   double MACD_Previous = iMACD(NULL, 0, FastEMA, SlowEMA, SignalSMA, PRICE_CLOSE, MODE_MAIN, 1); // Previous MACD Line
   double Signal_Current = iMACD(NULL, 0, FastEMA, SlowEMA, SignalSMA, PRICE_CLOSE, MODE_SIGNAL, 0); // Current Signal Line
   double Signal_Previous = iMACD(NULL, 0, FastEMA, SlowEMA, SignalSMA, PRICE_CLOSE, MODE_SIGNAL, 1); // Previous Signal Line

// Long Entry Condition
   if(Close_FirstCandle > EMA_Current &&
      ((MACD_Previous < 0 && Signal_Previous < 0 && MACD_Current > 0 && Signal_Current > 0) ||
       (MACD_Previous > 0 && Signal_Previous < 0 && MACD_Current > 0 && Signal_Current > 0) ||
       (MACD_Previous < 0 && Signal_Previous > 0 && MACD_Current > 0 && Signal_Current > 0)))
     {
      Print("MACD_EMA: Long condition met. Placing Buy order.");
      PlaceOrderMACD(OP_BUY, Ask, "MACD_EMA Long Entry");
      return;
     }

// Short Entry Condition
   if(Close_FirstCandle < EMA_Current &&
      ((MACD_Previous > 0 && Signal_Previous > 0 && MACD_Current < 0 && Signal_Current < 0) ||
       (MACD_Previous < 0 && Signal_Previous > 0 && MACD_Current < 0 && Signal_Current < 0) ||
       (MACD_Previous > 0 && Signal_Previous < 0 && MACD_Current < 0 && Signal_Current < 0)))
     {
      Print("MACD_EMA: Short condition met. Placing Sell order.");
      PlaceOrderMACD(OP_SELL, Bid, "MACD_EMA Short Entry");
      return;
     }
  }

//+------------------------------------------------------------------+
//| MA7 Strategy                                                     |
//+------------------------------------------------------------------+
void ProcessMA7()
  {
   double MA7_ThirdCandle = iMA(Symbol(), 0, MA_Period, 0, MODE_EMA, PRICE_CLOSE, 2); // 3rd candle MA7
   double MA7_SecondCandle = iMA(Symbol(), 0, MA_Period, 0, MODE_EMA, PRICE_CLOSE, 1); // 2nd candle MA7
   double Open_ThirdCandle = iOpen(Symbol(), 0, 2);   // 3rd candle open
   double Close_ThirdCandle = iClose(Symbol(), 0, 2); // 3rd candle close
   double Open_SecondCandle = iOpen(Symbol(), 0, 1);   // 2nd candle open
   double Close_SecondCandle = iClose(Symbol(), 0, 1); // 2nd candle close
   double High_SecondCandle = iHigh(Symbol(), 0, 1);   // 2nd candle high
   double Low_SecondCandle = iLow(Symbol(), 0, 1);     // 2nd candle low

// Long Entry Condition
   if(Open_ThirdCandle < MA7_ThirdCandle && Close_ThirdCandle > MA7_ThirdCandle &&
      Open_SecondCandle > MA7_SecondCandle && Close_SecondCandle > MA7_SecondCandle &&
      High_SecondCandle > MA7_SecondCandle && Low_SecondCandle > MA7_SecondCandle)
     {
      Print("MA7: Long condition met. Placing Buy order.");
      PlaceOrderMA7(OP_BUY, Ask, "MA7 Long Entry");
      return;
     }

// Short Entry Condition
   if(Open_ThirdCandle > MA7_ThirdCandle && Close_ThirdCandle < MA7_ThirdCandle &&
      Open_SecondCandle < MA7_SecondCandle && Close_SecondCandle < MA7_SecondCandle &&
      High_SecondCandle < MA7_SecondCandle && Low_SecondCandle < MA7_SecondCandle)
     {
      Print("MA7: Short condition met. Placing Sell order.");
      PlaceOrderMA7(OP_SELL, Bid, "MA7 Short Entry");
      return;
     }
  }

//+------------------------------------------------------------------+
//| Place Order Functions                                            |
//+------------------------------------------------------------------+
void PlaceOrderMACD(int orderType, double price, string comment)
  {
   double sl = (orderType == OP_BUY) ? price - StopLoss1 : price + StopLoss1;
   double tp = (orderType == OP_BUY) ? price + takeProfit : price - takeProfit;
   int ticket = OrderSend(Symbol(), orderType, Lots, price, 3, sl, tp, comment, MACD_MagicNumber, clrBlue);

   if(ticket < 0)
      Print("MACD_EMA: Order failed to place. Error: ", GetLastError());
   else
      Print("MACD_EMA: Order placed successfully. Ticket #: ", ticket);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void PlaceOrderMA7(int orderType, double price, string comment)
  {
   double sl = (orderType == OP_BUY) ? price - StopLoss2 : price + StopLoss2;
   int ticket = OrderSend(Symbol(), orderType, Lots, price, 3, sl,0, comment, MA7_MagicNumber, clrRed);

   if(ticket < 0)
      Print("MA7: Order failed to place. Error: ", GetLastError());
   else
      Print("MA7: Order placed successfully. Ticket #: ", ticket);
  }

//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| Check for Open Positions                                         |
//+------------------------------------------------------------------+
void UpdateTrailingStoploss()
  {
   for(int i = 0; i < OrdersTotal(); i++)
     {
      if(OrderSelect(i, SELECT_BY_POS) &&
         OrderSymbol() == Symbol() &&
         (OrderType() == OP_BUY || OrderType() == OP_SELL)
         && OrderMagicNumber()==MA7_MagicNumber)
        {

         double currentSL = OrderStopLoss(); // Get the current SL
         double entryPrice = OrderOpenPrice();// Get the entry price of the order
         double marketPrice = (OrderType() == OP_BUY) ? Bid : Ask; // Current market price
         double newSL;

         //Trailing Stop for Buy Orders
         if(OrderType() == OP_BUY)
           {
            if(OrderType() == OP_BUY)
              {
               // Initialize the LastBuyThreshold if it's the first time
               if(LastBuyThreshold == 0.0)
                  LastBuyThreshold = entryPrice;

               // Check if the market price has crossed the next threshold
               if(marketPrice >= LastBuyThreshold + TrailingStepUSD)
                 {
                  // Calculate the new SL based on the previous SL and MoveStopLoss
                  newSL = currentSL + MoveStopLoss;

                  // Only update SL if the new SL is less than the market price
                  if(newSL < marketPrice)
                    {
                     if(OrderModify(OrderTicket(), entryPrice, newSL, OrderTakeProfit(), 0, clrGreen))
                       {
                        Print("Trailing Stop Updated for Buy Order | New SL: ", newSL);
                        // Update the LastBuyThreshold to the next threshold
                        LastBuyThreshold += TrailingStepUSD;
                       }
                    }
                 }
              }
            // Trailing Stop for Sell Orders
            else
               if(OrderType() == OP_SELL)
                 {
                  // Initialize the LastSellThreshold if it's the first time
                  if(LastSellThreshold == 0.0)
                     LastSellThreshold = entryPrice;

                  // Check if the market price has crossed the next threshold
                  if(marketPrice <= LastSellThreshold - TrailingStepUSD)
                    {
                     // Calculate the new SL based on the previous SL and MoveStopLoss
                     newSL = currentSL - MoveStopLoss;

                     // Only update SL if the new SL is greater than the market price
                     if(newSL > marketPrice)
                       {
                        if(OrderModify(OrderTicket(), entryPrice, newSL, OrderTakeProfit(), 0, clrRed))
                          {
                           Print("Trailing Stop Updated for Sell Order | New SL: ", newSL);
                           // Update the LastSellThreshold to the next threshold
                           LastSellThreshold -= TrailingStepUSD;
                          }
                       }
                    }
                 }
           }
        }

     }
  }


//+------------------------------------------------------------------+
//| Check for Open Positions                                         |
//+------------------------------------------------------------------+
bool HasOpenPositions(int OrderMagicNumber)
  {
   for(int i = 0; i < OrdersTotal(); i++)
     {
      if(OrderSelect(i, SELECT_BY_POS) &&
         OrderSymbol() == Symbol() &&
         OrderType() <= OP_SELL
        )
        {
         Print(StrategyName, "EA Positions are ongoing");
         return true; // Found an open position with the specified magic number
        }
     }
   return false; // No matching positions found
  }
//+------------------------------------------------------------------+
//| Monitor Closed Orders and Start Cooldown                         |
//+------------------------------------------------------------------+
void MonitorClosedOrders()
  {
// Loop through order history
   for(int i = OrdersHistoryTotal() - 1; i >= 0; i--)
     {
      if(OrderSelect(i, SELECT_BY_POS, MODE_HISTORY))
        {
         // Skip orders already processed (before the last recorded close time)
         if(OrderCloseTime() <= LastCloseTime)
            continue;

         // Update LastCloseTime to this order's close time
         LastCloseTime = OrderCloseTime();

         // Start cooldown only if a trade has been closed
         if(CooldownEndTime == 0 || TimeCurrent() > CooldownEndTime)
           {
            CooldownEndTime = TimeCurrent() + CooldownDuration;
            Print(StrategyName, ": Order closed. Cooldown started. Ends at: ", TimeToString(CooldownEndTime, TIME_DATE | TIME_SECONDS));
           }
         break; // No need to process further orders
        }
     }
  }
//+------------------------------------------------------------------+
