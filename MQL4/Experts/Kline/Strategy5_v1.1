//+------------------------------------------------------------------+
//|                        Strategy 5.mq4                            |
//|                            Kline                                 |
//|                  https://www.mql5.com                            |
//+------------------------------------------------------------------+
#property copyright "Kline"
#property link      "https://www.mql5.com"
#property version   "11"
#property strict

//Changelog 1.01
//1. Update Candlestick Open on 3rd candle if below MA7 or Above MA7
//2. Update the stoploss and take profit module with dynamic trailing stop-loss
//3. Update Strategy 5 with magic Number 5

// External Parameters
extern double Lots = 0.05;           // Lot size for trading
extern double TakeProfit = 3.0;      // Take profit in pips
extern double StopLoss = 5.0;        // Stop loss in pips
extern double TrailingStepUSD = 3.0; // Trailing step in USD
extern int MagicNumber = 5;          // Magic number for identifying orders

string StrategyName = "Strategy 5";  // Strategy name for logging

//+------------------------------------------------------------------+
//| Initialization                                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   Print(StrategyName, " Initialized.");
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Deinitialization                                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   Print(StrategyName, " Deinitialized. Reason: ", reason);
   ObjectsDeleteAll(0, "TP_SL_");
  }

//+------------------------------------------------------------------+
//| Main OnTick Function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
// Check for existing positions and manage trailing stop-loss
   if(HasOpenPositions())
     {
      UpdateTrailingStopLoss();
      return; // Exit if any position is already open
     }

// Define parameters
   int MA_Period = 7; // Period for Moving Average (MA7)

// Calculate MA7 values
   double MA7_Current = iMA(Symbol(), 0, MA_Period, 0, MODE_SMA, PRICE_CLOSE, 0);  // Current MA7
   double MA7_FirstCandle = iMA(Symbol(), 0, MA_Period, 0, MODE_SMA, PRICE_CLOSE, 1); // 1st candle MA7
   double MA7_SecondCandle = iMA(Symbol(), 0, MA_Period, 0, MODE_SMA, PRICE_CLOSE, 2); // 2nd candle MA7
   double MA7_ThirdCandle = iMA(Symbol(), 0, MA_Period, 0, MODE_SMA, PRICE_CLOSE, 3);  // 3rd candle MA7

// Get closing prices
   double Close_FirstCandle = iClose(Symbol(), 0, 1);  // 1st candle close
   double Close_SecondCandle = iClose(Symbol(), 0, 2); // 2nd candle close
   double Close_ThirdCandle = iClose(Symbol(), 0, 3);  // 3rd candle close

// Get opening prices
   double Open_ThirdCandle = iOpen(Symbol(), 0, 3);    // 3rd candle open

// Long entry condition
   if(Close_FirstCandle > MA7_FirstCandle &&   // First candle closed above MA7
      Close_SecondCandle > MA7_SecondCandle && // Second candle closed above MA7
      Close_SecondCandle > MA7_SecondCandle &&  // Second candle did not touch MA7 (above it)
      Close_ThirdCandle > MA7_ThirdCandle)    // 3rd candle closed above MA7
     {

      Print(StrategyName, ": Long condition met.");
      PlaceOrder(OP_BUY, Open_ThirdCandle, "Long Entry");  // Enter at opening of third candle
     }

// Short entry condition
   if(Close_FirstCandle < MA7_FirstCandle &&   // First candle closed below MA7
      Close_SecondCandle < MA7_SecondCandle && // Second candle closed below MA7
      Close_SecondCandle < MA7_SecondCandle && // Second candle did not touch MA7 (below it)
      Close_ThirdCandle < MA7_ThirdCandle)    // 3rd candle closed below MA7
     {

      Print(StrategyName, ": Short condition met.");
      PlaceOrder(OP_SELL, Open_ThirdCandle, "Short Entry");  // Enter at opening of third candle
     }
  }

//+------------------------------------------------------------------+
//| PlaceOrder Function                                              |
//| Handles order placement logic                                    |
//+------------------------------------------------------------------+
void PlaceOrder(int orderType, double entryPrice, string tradeType)
  {
// Calculate StopLoss and TakeProfit
   double slPrice = (orderType == OP_BUY) ? entryPrice - StopLoss * Point : entryPrice + StopLoss * Point;
   double tpPrice = (orderType == OP_BUY) ? entryPrice + TakeProfit * Point : entryPrice - TakeProfit * Point;

// Sending the order
   int ticket = OrderSend(Symbol(), orderType, Lots, entryPrice, 3, slPrice, tpPrice,
                          StrategyName + " " + tradeType, MagicNumber, 0,
                          (orderType == OP_BUY ? clrGreen : clrRed));

   if(ticket < 0)
     {
      Print(StrategyName, ": Error opening ", (orderType == OP_BUY ? "Buy" : "Sell"), " order: ", GetLastError());
     }
   else
     {
      Print(StrategyName, ": Order placed: ", tradeType,
            " | Entry: ", entryPrice,
            " | SL: ", slPrice,
            " | TP: ", tpPrice);
      DrawTradeLevels(tradeType, entryPrice, tpPrice, slPrice);
     }
  }

//+------------------------------------------------------------------+
//| UpdateTrailingStopLoss                                           |
//| Adjusts StopLoss dynamically based on profit                    |
//+------------------------------------------------------------------+
void UpdateTrailingStopLoss()
  {
   for(int i = 0; i < OrdersTotal(); i++)
     {
      if(OrderSelect(i, SELECT_BY_POS) &&
         OrderMagicNumber() == MagicNumber && // Ensure it's our order
         OrderSymbol() == Symbol())          // Ensure it's the same symbol
        {
         double profitThreshold = TrailingStepUSD / MarketInfo(Symbol(), MODE_TICKVALUE);
         if(OrderType() == OP_BUY)
           {
            double newSL = OrderOpenPrice() + profitThreshold * Point;
            if(newSL > OrderStopLoss())
              {
               OrderModify(OrderTicket(), OrderOpenPrice(), newSL, OrderTakeProfit(), 0, clrGreen);
               Print("Trailing Stop Updated for Buy Order | New SL: ", newSL);
              }
           }
         else
            if(OrderType() == OP_SELL)
              {
               double newSL = OrderOpenPrice() - profitThreshold * Point;
               if(newSL < OrderStopLoss())
                 {
                  OrderModify(OrderTicket(), OrderOpenPrice(), newSL, OrderTakeProfit(), 0, clrRed);
                  Print("Trailing Stop Updated for Sell Order | New SL: ", newSL);
                 }
              }
        }
     }
  }

//+------------------------------------------------------------------+
//| Check for Open Positions                                         |
//| Returns true if any position is open for this symbol             |
//+------------------------------------------------------------------+
bool HasOpenPositions()
  {
   for(int i = 0; i < OrdersTotal(); i++)
     {
      if(OrderSelect(i, SELECT_BY_POS) &&
         OrderMagicNumber() == MagicNumber && // Ensure it's our order
         OrderSymbol() == Symbol())          // Ensure it's the same symbol
         return true; // Open position exists
     }
   return false; // No open positions
  }

//+------------------------------------------------------------------+
//| Draw Trade Levels                                                |
//| Visualizes Entry, Take Profit, and Stop Loss levels              |
//+------------------------------------------------------------------+
void DrawTradeLevels(string tradeType, double entryPrice, double tpPrice, double slPrice)
  {
   string prefix = "TP_SL_";

   string entryLineName = prefix + tradeType + "_Entry";
   string tpLineName = prefix + tradeType + "_TakeProfit";
   string slLineName = prefix + tradeType + "_StopLoss";

// Delete existing objects to avoid duplicates
   ObjectDelete(0, entryLineName);
   ObjectDelete(0, tpLineName);
   ObjectDelete(0, slLineName);

// Entry price line
   if(!ObjectCreate(0, entryLineName, OBJ_HLINE, 0, 0, entryPrice))
      Print("Error creating entry line: ", GetLastError());
   else
      ObjectSetInteger(0, entryLineName, OBJPROP_COLOR, clrWhite); // Change to clrBlack for dark backgrounds

// Take profit line
   if(!ObjectCreate(0, tpLineName, OBJ_HLINE, 0, 0, tpPrice))
      Print("Error creating take profit line: ", GetLastError());
   else
      ObjectSetInteger(0, tpLineName, OBJPROP_COLOR, clrGreen);

// Stop loss line
   if(!ObjectCreate(0, slLineName, OBJ_HLINE, 0, 0, slPrice))
      Print("Error creating stop loss line: ", GetLastError());
   else
      ObjectSetInteger(0, slLineName, OBJPROP_COLOR, clrRed);

   Print(tradeType, " trade levels drawn. Entry: ", entryPrice,
         ", TP: ", tpPrice, ", SL: ", slPrice);
  }
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
